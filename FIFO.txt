#include <iostream>
#include <queue>
#include <unordered_set>
#include <iomanip>

using namespace std;

int n; // Number of page references
int frame_size; // Number of frames
int pages[1000]; // Array to store page references

void fifo() {
    int page_hit = 0;
    int page_fault = 0;
    queue<int> Q; // Queue to keep track of pages in memory
    unordered_set<int> S; // Set to quickly check if a page is in memory

    for (int i = 0; i < n; i++) {
        // If the page is already in the set, it's a page hit
        if (S.find(pages[i]) != S.end()) {
            page_hit++;
        } else {
            // It's a page fault
            page_fault++;
            // If the frame is full, remove the oldest page
            if (Q.size() == frame_size) {
                int oldest_page = Q.front();
                Q.pop();
                S.erase(oldest_page);
            }
            // Add the new page to the queue and set
            Q.push(pages[i]);
            S.insert(pages[i]);
        }
    }

    // Display results
    cout << "\nTotal page hits: " << page_hit << endl;
    cout << "Total page faults: " << page_fault << endl;
    cout << "Page hit ratio: " << fixed << setprecision(2) << (static_cast<float>(page_hit) / n) * 100 << "%" << endl;
    cout << "Page fault ratio: " << fixed << setprecision(2) << (static_cast<float>(page_fault) / n) * 100 << "%" << endl;
}

int main() {
    cout << "Enter number of pages: ";
    cin >> n;
    if (n <= 0 || n > 1000) {
        cout << "Invalid number of pages. Please enter a number between 1 and 1000." << endl;
        return 1;
    }

    cout << "Enter number of frames: ";
    cin >> frame_size;
    if (frame_size <= 0) {
        cout << "Invalid number of frames. Please enter a positive number." << endl;
        return 1;
    }

    cout << "Enter all page references: ";
    for (int i = 0; i < n; i++) {
        cin >> pages[i];
    }

    fifo(); // Call the FIFO function
    return 0;
}
