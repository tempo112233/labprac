#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int main() {
    int n;  // Number of processes
    cout << "Enter number of processes: ";
    cin >> n;

    // Arrays for Arrival Time (AT), Burst Time (BT), Priority, Completion Time (CT), Turnaround Time (TAT), and Waiting Time (WT)
    int at[n], bt[n], pt[n], ct[n], tat[n], wt[n], f[n];

    // Input Arrival Time (AT), Burst Time (BT), and Priority for each process
    for (int i = 0; i < n; i++) {
        cout << "Enter Arrival Time (AT) for P" << i + 1 << ": ";
        cin >> at[i];
        cout << "Enter Burst Time (BT) for P" << i + 1 << ": ";
        cin >> bt[i];
        cout << "Enter Priority for P" << i + 1 << ": ";
        cin >> pt[i];
        f[i] = 0;  // Process is initially not completed
    }

    int st = 0, t = 0;
    float totalWT = 0, totalTAT = 0;

    // Priority Scheduling Algorithm
    while (true) {
        int c = -1, min = INT_MAX;

        // Check if all processes are completed
        if (t == n) break;

        // Find the process with the highest priority (lowest priority number)
        for (int i = 0; i < n; i++) {
            // If process is not yet finished and its arrival time has passed
            if (at[i] <= st && f[i] == 0 && pt[i] < min) {
                min = pt[i];
                c = i;
            }
        }

        // If no process is ready to execute, just increase the time
        if (c == -1) {
            st++;
        } else {
            // Set Completion Time (CT), Turnaround Time (TAT), and Waiting Time (WT) for the selected process
            ct[c] = st + bt[c];  // Completion time = start time + burst time
            st += bt[c];  // Increment start time by burst time of the current process
            tat[c] = ct[c] - at[c];  // Turnaround Time = Completion Time - Arrival Time
            wt[c] = tat[c] - bt[c];  // Waiting Time = Turnaround Time - Burst Time
            f[c] = 1;  // Mark the process as completed
            t++;  // Increment completed processes count
        }
    }

    // Display the results
    cout << "Process     BT      AT      Priority      WT      TAT" << endl;
    for (int i = 0; i < n; i++) {
        totalWT += wt[i];
        totalTAT += tat[i];
        cout << "P" << i + 1 << "           " << bt[i] << "     " << at[i] << "       " << pt[i] << "             " << wt[i] << "       " << tat[i] << endl;
    }

    // Calculate and display the average waiting time and average turnaround time
    cout << "Avg WT: " << (totalWT / n) << endl;
    cout << "Avg TAT: " << (totalTAT / n) << endl;

    return 0;
}
