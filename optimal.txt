#include <iostream>
#include <vector>
#include <limits>

using namespace std;

bool present(const vector<int>& table_frame, int page) {
    for (int frame : table_frame) {
        if (frame == page) {
            return true;
        }
    }
    return false;
}

void printTable(const vector<int>& table_frame) {
    for (int frame : table_frame) {
        if (frame == -1) {
            cout << "-- ";
        } else {
            cout << frame << " ";
        }
    }
    cout << " >> ";
}

int findPosition(const vector<int>& table_frame, const vector<int>& pages, int curr, int np) {
    for (int i = 0; i < table_frame.size(); i++) {
        if (table_frame[i] == -1) {
            return i; // Empty frame
        }
    }

    vector<int> pos(table_frame.size(), numeric_limits<int>::max());

    for (int i = 0; i < table_frame.size(); i++) {
        for (int j = curr + 1; j < np; j++) {
            if (pages[j] == table_frame[i]) {
                pos[i] = j; // Next use index
                break;
            }
        }
    }

    // Find the frame that will be used farthest in the future
    int max_pos = -1;
    int return_pos = -1;
    for (int i = 0; i < table_frame.size(); i++) {
        if (pos[i] > max_pos) {
            max_pos = pos[i];
            return_pos = i;
        }
    }

    return return_pos;
}

int main() {
    int nf; // Number of frames
    cout << "\nEnter number of frames: ";
    cin >> nf;

    vector<int> table_frame(nf, -1);
    
    int n; // Total number of page requests
    cout << "Enter total number of page requests: ";
    cin >> n;

    vector<int> pages(n);
    cout << "Enter pages: ";
    for (int i = 0; i < n; i++) {
        cin >> pages[i];
    }

    int page_faults = 0;
    cout << "Position of frame table after each request:\n";

    for (int i = 0; i < n; i++) {
        cout << "Page table after request from " << pages[i] << " -> ";
        
        if (!present(table_frame, pages[i])) {
            int pos = findPosition(table_frame, pages, i, n);
            table_frame[pos] = pages[i];
            printTable(table_frame);
            cout << " page fault\n";
            page_faults++;
        } else {
            printTable(table_frame);
            cout << "\n";
        }
    }

    cout << "\nNumber of page faults: " << page_faults << endl;
    cout << "Number of page hits: " << (n - page_faults) << endl;

    return 0;
}
